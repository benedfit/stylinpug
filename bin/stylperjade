#!/usr/bin/env node

var program = require('commander')
  , package = require('../package.json')
  , stylperjade = require('../lib/stylperjade')

  , cssPatterns = []
  , jadePatterns = []
  , options = {}

program
  .version(package.version)
  .description(package.description)
  .option
    ( '-c, --config <file>'
    , 'The alternative path to a .stylperjaderc file to load options from'
    )
  .option
    ( '-v, --verbose'
    , 'Displays the visual representation of blacklisted and unused classes found across all files'
    )
  .usage('[options] <cssFiles...> <jadeFiles...>')
  .action(function (cssFiles, jadeFiles) {
    console.log(333, cssFiles)
    console.log(444, jadeFiles)
    if (cssFiles && typeof cssFiles === 'string') cssPatterns.push(cssFiles)
    if (jadeFiles && typeof jadeFiles === 'string') jadePatterns.push(jadeFiles)
  })
  .parse(process.argv)

console.log(111, cssPatterns)
console.log(222, jadePatterns)

if (!cssPatterns.length || !jadePatterns.length) {
  program.help()
}

if (program.config) {
  options.stylperjaderc = program.config
}

try {
  stylperjade(cssPatterns, jadePatterns, options, function (err, results) {
    if (err) {
      console.error(err)
      process.exit(1)
    }

    if (program.verbose) {
      console.log(results.report)
    }

    process.exit()
  })
} catch (err) {
  console.error(err)
  process.exit(1)
}
